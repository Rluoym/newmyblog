<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myblog.mapper.LikeMapper">
  <resultMap id="BaseResultMap" type="com.myblog.po.Like">
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="dislike_count" jdbcType="INTEGER" property="dislikeCount" />
    <result column="like_memo" jdbcType="VARCHAR" property="likeMemo" />
    <result column="blog_id" jdbcType="VARCHAR" property="blogId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    like_count, dislike_count, like_memo, blog_id
  </sql>
  <select id="selectByExample" parameterType="com.myblog.po.LikeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from like
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.myblog.po.LikeExample">
    delete from like
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myblog.po.Like">
    insert into like (like_count, dislike_count, like_memo, 
      blog_id)
    values (#{likeCount,jdbcType=INTEGER}, #{dislikeCount,jdbcType=INTEGER}, #{likeMemo,jdbcType=VARCHAR}, 
      #{blogId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.myblog.po.Like">
    insert into like
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="dislikeCount != null">
        dislike_count,
      </if>
      <if test="likeMemo != null">
        like_memo,
      </if>
      <if test="blogId != null">
        blog_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="dislikeCount != null">
        #{dislikeCount,jdbcType=INTEGER},
      </if>
      <if test="likeMemo != null">
        #{likeMemo,jdbcType=VARCHAR},
      </if>
      <if test="blogId != null">
        #{blogId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myblog.po.LikeExample" resultType="java.lang.Long">
    select count(*) from like
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update like
    <set>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.dislikeCount != null">
        dislike_count = #{record.dislikeCount,jdbcType=INTEGER},
      </if>
      <if test="record.likeMemo != null">
        like_memo = #{record.likeMemo,jdbcType=VARCHAR},
      </if>
      <if test="record.blogId != null">
        blog_id = #{record.blogId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update like
    set like_count = #{record.likeCount,jdbcType=INTEGER},
      dislike_count = #{record.dislikeCount,jdbcType=INTEGER},
      like_memo = #{record.likeMemo,jdbcType=VARCHAR},
      blog_id = #{record.blogId,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>